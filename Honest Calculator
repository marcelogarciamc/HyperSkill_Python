# write your code here
msg_0 = "Enter an equation"
msg_1 = "Do you even know what numbers are? Stay focused!"
msg_2 = "Yes ... an interesting math operation. You've slept through all classes, haven't you?"
msg_3 = "Yeah... division by zero. Smart move..."
msg_4 = "Do you want to store the result? (y / n):"
msg_5 = "Do you want to continue calculations? (y / n):"
msg_6 = " ... lazy"
msg_7 = " ... very lazy"
msg_8 = " ... very, very lazy"
msg_9 = "You are"
msg_10 = "Are you sure? It is only one digit! (y / n)"
msg_11 = "Don't be silly! It's just one number! Add to the memory? (y / n)"
msg_12 = "Last chance! Do you really want to embarrass yourself? (y / n)"

operators = ["+", "-", "/", "*"]
memory = 0


def calc_main():
    global memory
    while True:
        print(msg_0)
        user_input = input().split()
        first_arg = user_input[0]
        second_arg = user_input[2]
        operation = user_input[1]
        try:
            x = memory if first_arg == 'M' else float(first_arg)
            y = memory if second_arg == 'M' else float(second_arg)

            laziness_check(x, y, operation)

            if operation not in operators:
                print(msg_2)
                continue

            if operation == "/":
                try:
                    result = float(x) / float(y)
                except ZeroDivisionError:
                    print(msg_3)
                    continue
            elif operation == "+":
                result = float(x) + float(y)
            elif operation == "-":
                result = float(x) - float(y)
            else:
                result = float(x) * float(y)

            print(result)

            mem_choice = input(msg_4)
            if mem_choice == "y":
                if not is_one_digit(result):
                    memory = result
                else:
                    if memory_check(result) == 3:
                        memory = result
                    else:
                        pass

            user_option = input(msg_5)
            if user_option == "n":
                break

        except ValueError:
            print(msg_1)


def laziness_check(x, y, z):
    msg = ""
    check = [is_one_digit(x), is_one_digit(y)]
    if all(check):
        msg = msg + msg_6
    else:
        pass
    if (x == 1 or y == 1) and z == "*":
        msg = msg + msg_7
    else:
        pass
    if (x == 0 or y == 0) and z in ["*", "+", "-"]:
        msg = msg + msg_8
    else:
        pass
    if msg != "":
        print(msg_9 + msg)


def is_one_digit(n):
    if -10 < n < 10 and n % 1 == 0:
        return True
    else:
        return False


def memory_check(x):
    if is_one_digit(x):
        mem_ask = input(msg_10)
        mem_index = 0
        if mem_ask == 'y':
            mem_index = mem_index + 1
        if mem_index == 1:
            mem_ask_2 = input(msg_11)
            if mem_ask_2 == 'y':
                mem_index = mem_index + 1
            if mem_index == 2:
                mem_ask_3 = input(msg_12)
                if mem_ask_3 == 'y':
                    mem_index = mem_index + 1
                    return mem_index


if __name__ == "__main__":
    calc_main()
